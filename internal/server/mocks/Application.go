// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "github.com/cronnoss/avitotech/internal/model"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// ConvertBalance provides a mock function with given fields: _a0, _a1, _a2
func (_m *Application) ConvertBalance(_a0 context.Context, _a1 *model.Balance, _a2 string) (*model.Balance, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ConvertBalance")
	}

	var r0 *model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Balance, string) (*model.Balance, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Balance, string) *model.Balance); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Balance, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Debit provides a mock function with given fields: _a0, _a1, _a2
func (_m *Application) Debit(_a0 context.Context, _a1 int64, _a2 decimal.Decimal) (*model.Balance, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Debit")
	}

	var r0 *model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, decimal.Decimal) (*model.Balance, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, decimal.Decimal) *model.Balance); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, decimal.Decimal) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: _a0, _a1
func (_m *Application) GetBalance(_a0 context.Context, _a1 *model.Balance) (*model.Balance, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Balance) (*model.Balance, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Balance) *model.Balance); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Balance) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: _a0, _a1, _a2
func (_m *Application) GetTransactions(_a0 context.Context, _a1 int64, _a2 string) ([]model.Transaction, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) ([]model.Transaction, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []model.Transaction); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUp provides a mock function with given fields: _a0, _a1, _a2
func (_m *Application) TopUp(_a0 context.Context, _a1 int64, _a2 decimal.Decimal) (*model.Balance, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for TopUp")
	}

	var r0 *model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, decimal.Decimal) (*model.Balance, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, decimal.Decimal) *model.Balance); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, decimal.Decimal) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Application) Transfer(_a0 context.Context, _a1 int64, _a2 int64, _a3 decimal.Decimal) (*model.Balance, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 *model.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, decimal.Decimal) (*model.Balance, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, decimal.Decimal) *model.Balance); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, decimal.Decimal) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
